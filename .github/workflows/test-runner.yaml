# Run clang-tidy Static Analysis
name: Run clang-tidy Static Analysis

on:
  workflow_call:
    inputs:
      ubuntu-docker-version:
        required: true
        type: string
      timeout:
        required: true
        type: number
      build-type:
        required: true
        type: string
        default: Release
      log-params:
        required: false
        type: string
        default: ""
  workflow_dispatch:
    inputs:
      ubuntu-docker-version:
        required: true
        description: 'The version of Ubuntu to build on'
        type: choice
        options:
          - ubuntu-22.04
          - ubuntu-24.04
        default: ubuntu-22.04
      timeout:
        required: true
        description: 'The timeout for the clang-tidy analysis in minutes'
        type: number
        default: 30
      build-type:
        required: true
        default: Release
        type: choice
        options:
          - Release
          - RelWithDebInfo
          - Debug
          - ASan
          - TSan
  pull_request:
  push:
    branches: ["main"]

env:
  BUILD_OUTPUT_DIR: ./build

jobs:
  clang-tidy:
    name: |
      clang-tidy Analysis (${{ inputs.build-type || 'Release' }}, ${{ inputs.ubuntu-docker-version || 'ubuntu-22.04' }})
    # Due to parsing bug, fromJSON is used to convert string to number
    timeout-minutes: ${{ fromJSON(inputs.timeout || '15') }}
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/${{ github.repository }}/tt-umd-ci-${{ inputs.ubuntu-docker-version || 'ubuntu-22.04' }}:latest

    steps:
      - name: Print all params
        run: |
          ${{ inputs.log-params }}
          echo clang-tidy - ubuntu-docker-version: ${{ inputs.ubuntu-docker-version || 'ubuntu-22.04' }}
          echo clang-tidy - timeout: ${{ inputs.timeout || '15' }}
          echo clang-tidy - build-type: ${{ inputs.build-type || 'Release' }}

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install clang-tidy
        run: |
          echo "Installing clang-tidy..."
          apt-get update
          apt-get install -y clang-tidy-17
          clang-tidy-17 --version

      - name: Configure CMake with clang-tidy
        run: |
          echo "Configuring CMake with clang-tidy enabled..."
          cmake -B ${{ env.BUILD_OUTPUT_DIR }} -G Ninja \
            -DTT_UMD_BUILD_TESTS=ON \
            -DTT_UMD_BUILD_SIMULATION=ON \
            -DTT_UMD_BUILD_PYTHON=ON \
            -DTT_UMD_BUILD_EXAMPLES=ON \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DENABLE_CLANG_TIDY=ON \
            -DCMAKE_BUILD_TYPE=${{ inputs.build-type || 'Release' }}

      - name: Run clang-tidy analysis
        run: |
          echo "Running clang-tidy static analysis..."
          cmake --build ${{ env.BUILD_OUTPUT_DIR }} --target umd_tests
          echo "Clang-tidy analysis completed successfully."

      - name: Upload compile commands
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: >
            clang-tidy-compile-commands-${{ inputs.ubuntu-docker-version || 'ubuntu-22.04' }}
            -${{ inputs.build-type || 'Release' }}
          path: ${{ env.BUILD_OUTPUT_DIR }}/compile_commands.json

      - name: Upload clang-tidy config
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: >
            clang-tidy-config-${{ inputs.ubuntu-docker-version || 'ubuntu-22.04' }}
            -${{ inputs.build-type || 'Release' }}
          path: |
            .clang-tidy-build
            .clang-tidy
